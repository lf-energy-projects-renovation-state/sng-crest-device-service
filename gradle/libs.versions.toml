[versions]
avro = "1.12.0"
avro-plugin = "1.9.1"
commonsCodec = "1.19.0"
dependency-management = "1.1.7"
gradleWrapperUpgrade = "0.12"
gxf-utils = "2.4.0"
kotlin = "2.2.10"
kotlin-logging = "7.0.12"
mockk = "1.14.5"
springmockk = "4.0.2"
sonarqube = "6.2.0.5505"
spotless = "7.2.1"
spring-boot = "3.5.4"

[libraries]
avro = { group = "org.apache.avro", name = "avro", version.ref = "avro" }
commonsCodec = { group = "commons-codec", name = "commons-codec", version.ref = "commonsCodec" }
flyway = { group = "org.flywaydb", name = "flyway-database-postgresql" }
h2 = { group = "com.h2database", name = "h2" }
jacksonKotlinModule = { group = "com.fasterxml.jackson.module", name = "jackson-module-kotlin" }
junitJupiterApi = { group = "org.junit.jupiter", name = "junit-jupiter-api" }
junitJupiterEngine = { group = "org.junit.jupiter", name = "junit-jupiter-engine" }
junitPlatformLauncher = { group = "org.junit.platform", name = "junit-platform-launcher" }
kafkaAvro = { group = "com.gxf.utilities", name = "kafka-avro", version.ref = "gxf-utils" }
kafkaAzureOAuth = { group = "com.gxf.utilities", name = "kafka-azure-oauth", version.ref = "gxf-utils" }
kafkaTestContainer = { group = "org.testcontainers", name = "kafka" }
kotlinReflect = { group = "org.jetbrains.kotlin", name = "kotlin-reflect", version.ref = "kotlin" }
logging = { group = "io.github.oshai", name = "kotlin-logging-jvm", version.ref = "kotlin-logging" }
micrometerPrometheusModule = { group = "io.micrometer", name = "micrometer-registry-prometheus" }
mockk = { group = "io.mockk", name = "mockk", version.ref = "mockk" }
postgresql = { group = "org.postgresql", name = "postgresql" }
springmockk = { group = "com.ninja-squad", name = "springmockk", version.ref = "springmockk" }
springBootDependencies = { group = "org.springframework.boot", name = "spring-boot-dependencies", version.ref = "spring-boot" }
springBootStarterActuator = { group = "org.springframework.boot", name = "spring-boot-starter-actuator" }
springBootStarterSecurity = { group = "org.springframework.boot", name = "spring-boot-starter-security" }
springBootStarterTest = { group = "org.springframework.boot", name = "spring-boot-starter-test" }
springBootStarterThymeleaf = { group = "org.springframework.boot", name = "spring-boot-starter-thymeleaf" }
springBootStarterWeb = { group = "org.springframework.boot", name = "spring-boot-starter-web" }
springBootStarterDataJpa = { group = "org.springframework.boot", name = "spring-boot-starter-data-jpa" }
springSecurityCore = { group = "org.springframework.security", name = "spring-security-core" }
springSecurityConfig = { group = "org.springframework.security", name = "spring-security-config" }
springSecurityLdap = { group = "org.springframework.security", name = "spring-security-ldap" }
springSecurityTest = { group = "org.springframework.security", name = "spring-security-test" }
springSecurityWeb = { group = "org.springframework.security", name = "spring-security-web" }
springKafka = { group = "org.springframework.kafka", name = "spring-kafka" }
springKafkaTest = { group = "org.springframework.kafka", name = "spring-kafka-test" }
springLdapCore = { group = "org.springframework.ldap", name = "spring-ldap-core" }
springWsTest = { group = "org.springframework.ws", name = "spring-ws-test" }

[bundles]
gxfUtils = ["kafkaAvro", "kafkaAzureOAuth"]
springSecurity = ["springBootStarterSecurity", "springLdapCore", "springSecurityLdap", "springSecurityWeb"]

[plugins]
avro = { id = "com.github.davidmc24.gradle.plugin.avro", version.ref = "avro-plugin" }
dependencyManagement = { id = "io.spring.dependency-management", version.ref = "dependency-management" }
eclipse = { id = "eclipse" }
gradleWrapperUpgrade = { id = "org.gradle.wrapper-upgrade", version.ref = "gradleWrapperUpgrade" }
jacoco = { id = "jacoco" }
jacocoReportAggregation = { id = "jacoco-report-aggregation" }
kotlin = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
sonarqube = { id = "org.sonarqube", version.ref = "sonarqube" }
spring = { id = "org.jetbrains.kotlin.plugin.spring", version.ref = "kotlin" }
jpa = { id = "org.jetbrains.kotlin.plugin.jpa", version.ref = "kotlin" }
springBoot = { id = "org.springframework.boot", version.ref = "spring-boot" }
spotless = { id = "com.diffplug.spotless", version.ref = "spotless" }
